import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Link } from "wouter";
import { Instagram, Loader2 } from "lucide-react";

interface GalleryImage {
  id: number;
  instagramUrl: string;
  embedHtml: string;
  thumbnailUrl: string;
  caption: string;
  title: string;
  description: string;
  category: string;
  tags: string[];
  sortOrder: number;
  isActive: boolean;
  createdAt: string;
}

const CATEGORY_LABELS = {
  general: 'General',
  wedding: 'Wedding',
  birthday: 'Birthday',
  specialty: 'Specialty',
  custom: 'Custom',
  seasonal: 'Seasonal'
};

export default function Gallery() {
  console.log('üéØ Gallery component rendering');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  // Fetch gallery images
  const { data: images = [], isLoading, error } = useQuery({
    queryKey: ['gallery', selectedCategory],
    queryFn: async () => {
      const url = selectedCategory === 'all' 
        ? '/api/gallery' 
        : `/api/gallery?category=${selectedCategory}`;
      
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error('Failed to fetch gallery images');
      }
      
      return response.json();
    }
  });

  // Get unique categories from images
  const categories = Array.from(new Set(images.map((img: GalleryImage) => img.category)));

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // Load Instagram embed script and process embeds when images change
  useEffect(() => {
    console.log('Gallery useEffect running, images length:', images.length);
    
    if (images.length === 0) {
      console.log('No images, skipping Instagram script loading');
      return;
    }

    console.log('Starting Instagram script loading process...');
    
    const processEmbeds = () => {
      console.log('processEmbeds called, window.instgrm:', !!window.instgrm);
      if (window.instgrm && window.instgrm.Embeds) {
        console.log('‚úÖ Processing Instagram embeds...');
        window.instgrm.Embeds.process();
        
        // Check what happened after processing and hide fallbacks for working embeds
        setTimeout(() => {
          const embeds = document.querySelectorAll('.instagram-media');
          console.log(`Found ${embeds.length} Instagram embeds after processing`);
          
          embeds.forEach((embed, index) => {
            const hasImages = embed.querySelector('img');
            const hasIframes = embed.querySelector('iframe');
            const isProcessed = hasImages || hasIframes;
            
            console.log(`Embed ${index + 1}: has images=${!!hasImages}, has iframes=${!!hasIframes}, processed=${isProcessed}`);
            
            if (isProcessed) {
              // Find the corresponding fallback and hide it
              const container = embed.closest('.relative');
              const fallback = container?.querySelector('.instagram-fallback');
              if (fallback) {
                (fallback as HTMLElement).style.display = 'none';
                console.log(`Hiding fallback for embed ${index + 1}`);
              }
            } else {
              console.log(`Embed ${index + 1} did not load properly, showing fallback`);
            }
          });
        }, 3000);
      } else {
        console.log('‚ùå Instagram API not available');
      }
    };

    const loadInstagramScript = () => {
      console.log('loadInstagramScript called');
      const existingScript = document.querySelector('script[src*="instagram.com/embed.js"]');
      console.log('Existing Instagram script found:', !!existingScript);
      
      if (!existingScript) {
        console.log('Creating new Instagram script...');
        const script = document.createElement('script');
        script.src = 'https://www.instagram.com/embed.js';
        script.async = true;
        script.onload = () => {
          console.log('‚úÖ Instagram script loaded successfully');
          setTimeout(processEmbeds, 500);
        };
        script.onerror = (error) => {
          console.error('‚ùå Failed to load Instagram script:', error);
        };
        document.head.appendChild(script);
        console.log('Instagram script added to head');
      } else {
        console.log('Script already exists, checking if Instagram API is available...');
        if (window.instgrm) {
          console.log('Instagram API available, processing immediately');
          setTimeout(processEmbeds, 100);
        } else {
          console.log('Instagram API not available yet, waiting...');
          setTimeout(() => {
            console.log('Retry: checking Instagram API availability...');
            if (window.instgrm) {
              console.log('Instagram API now available');
              processEmbeds();
            } else {
              console.log('Instagram API still not available');
            }
          }, 1000);
        }
      }
    };

    loadInstagramScript();
    
    // Also try processing after DOM updates
    const timeoutId = setTimeout(() => {
      console.log('Timeout processing attempt...');
      if (window.instgrm) {
        processEmbeds();
      } else {
        console.log('Instagram API still not available after timeout');
      }
    }, 3000);

    return () => {
      console.log('Cleaning up Instagram effect');
      clearTimeout(timeoutId);
    };
  }, [images]);

  // Declare instgrm for TypeScript
  declare global {
    interface Window {
      instgrm?: {
        Embeds: {
          process: () => void;
        };
      };
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50">
      <div className="container mx-auto py-12 px-4">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              Our Cake Gallery
            </h1>
            <p className="text-lg text-gray-600 mb-8">
              Browse through our collection of beautiful custom cakes and get inspired for your next order!
            </p>

            {/* Category Filter */}
            {categories.length > 0 && (
              <div className="flex flex-wrap justify-center gap-2 mb-8">
                <Button
                  variant={selectedCategory === 'all' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setSelectedCategory('all')}
                >
                  All
                </Button>
                {categories.map(category => (
                  <Button
                    key={category}
                    variant={selectedCategory === category ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => setSelectedCategory(category)}
                  >
                    {CATEGORY_LABELS[category as keyof typeof CATEGORY_LABELS] || category}
                  </Button>
                ))}
              </div>
            )}
          </div>

          {/* Loading State */}
          {isLoading && (
            <div className="text-center py-12">
              <Loader2 className="h-12 w-12 animate-spin mx-auto text-gray-400" />
              <p className="mt-4 text-gray-600">Loading gallery...</p>
            </div>
          )}

          {/* Error State */}
          {error && (
            <Card className="p-12 bg-white/80 backdrop-blur text-center">
              <div className="text-red-500 mb-4">‚ö†Ô∏è</div>
              <h2 className="text-2xl font-semibold text-gray-800 mb-2">
                Unable to Load Gallery
              </h2>
              <p className="text-gray-600 mb-4">
                We're having trouble loading our gallery right now. Please try again later.
              </p>
              <Button onClick={() => window.location.reload()}>
                Try Again
              </Button>
            </Card>
          )}

          {/* Empty State */}
          {!isLoading && !error && images.length === 0 && (
            <Card className="p-12 bg-white/80 backdrop-blur text-center">
              <div className="text-6xl mb-4">üéÇ</div>
              <h2 className="text-2xl font-semibold text-gray-800 mb-2">
                Gallery Coming Soon
              </h2>
              <p className="text-gray-600 mb-4 max-w-md mx-auto">
                We're building our gallery showcase. In the meantime, start designing your perfect cake!
              </p>
              <Link to="/order">
                <Button size="lg">
                  Design Your Cake
                </Button>
              </Link>
            </Card>
          )}

          {/* Gallery Grid */}
          {!isLoading && !error && images.length > 0 && (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
                {images.map((image: GalleryImage) => (
                  <Card key={image.id} className="overflow-hidden bg-white/80 backdrop-blur hover:shadow-lg transition-shadow">
                    <CardContent className="p-0">
                      {/* Instagram Embed with Fallback */}
                      <div className="relative" style={{ minHeight: '400px' }}>
                        {/* Try Instagram Embed First */}
                        <div 
                          className="instagram-embed-container"
                          dangerouslySetInnerHTML={{ __html: image.embedHtml }}
                        />
                        
                        {/* Fallback Card Overlay (will be hidden if embed works) */}
                        <div 
                          className="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-pink-50 to-purple-50 instagram-fallback"
                          style={{ zIndex: 1 }}
                        >
                          <div className="text-center p-6 bg-white rounded-xl shadow-lg max-w-sm mx-4">
                            <div className="w-16 h-16 bg-gradient-to-br from-pink-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
                              <Instagram className="h-8 w-8 text-white" />
                            </div>
                            <h3 className="text-lg font-semibold text-gray-900 mb-2">
                              {image.title}
                            </h3>
                            <p className="text-sm text-gray-600 mb-4">
                              Beautiful cake creation from Instagram
                            </p>
                            <a 
                              href={image.instagramUrl} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="inline-flex items-center gap-2 bg-gradient-to-r from-pink-500 to-purple-600 text-white px-6 py-3 rounded-lg hover:shadow-lg transition-all"
                            >
                              <Instagram className="h-4 w-4" />
                              View on Instagram
                            </a>
                            <p className="text-xs text-gray-500 mt-3">
                              Tap to see the full post with images
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      {/* Image Details */}
                      <div className="p-6">
                        <div className="flex items-center justify-between mb-3">
                          <h3 className="text-lg font-semibold text-gray-900 truncate">
                            {image.title}
                          </h3>
                          <Badge variant="secondary" className="ml-2">
                            {CATEGORY_LABELS[image.category as keyof typeof CATEGORY_LABELS] || image.category}
                          </Badge>
                        </div>
                        
                        {image.description && (
                          <p className="text-gray-600 text-sm mb-4 line-clamp-2">
                            {image.description}
                          </p>
                        )}
                        
                        <div className="flex items-center justify-between text-xs text-gray-500">
                          <span>{formatDate(image.createdAt)}</span>
                          <a 
                            href={image.instagramUrl} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="flex items-center gap-1 text-blue-600 hover:text-blue-700"
                          >
                            <Instagram className="h-3 w-3" />
                            View Post
                          </a>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>

              {/* Call to Action */}
              <div className="text-center">
                <Card className="p-8 bg-white/80 backdrop-blur">
                  <h3 className="text-2xl font-semibold text-gray-900 mb-4">
                    Inspired by What You See?
                  </h3>
                  <p className="text-gray-600 mb-6">
                    Create your own custom cake with our interactive designer!
                  </p>
                  <div className="flex gap-4 justify-center">
                    <Link to="/order">
                      <Button size="lg">
                        Design Your Cake
                      </Button>
                    </Link>
                    <Link to="/cakes">
                      <Button variant="outline" size="lg">
                        Browse Specialties
                      </Button>
                    </Link>
                  </div>
                </Card>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}