- title: Set up PostgreSQL database schema with Drizzle ORM
  description: Create and configure the core database tables for orders, order items, and user authentication.
  details: Install Drizzle ORM and configure with Railway PostgreSQL connection. Create schema files for cake_orders table (id, customerName, customerEmail, customerPhone, layers, shape, flavors, icingColor, icingType, decorations, message, dietaryRestrictions, servings, sixInchCakes, eightInchCakes, deliveryMethod, specialInstructions, totalPrice, status, orderDate, hasLineItems), order_items table (id, orderId, itemType, itemName, quantity, unitPrice, totalPrice, plus cake configuration fields), and users table (id, username, password). Set up database migrations and connection configuration with environment variables.
  testStrategy: Verify database connection, test table creation, validate schema constraints, test data insertion and retrieval.
  priority: high
  dependencies: []

- title: Initialize Express server with TypeScript and middleware
  description: Set up the backend server with routing, middleware, and basic configuration.
  details: Create Express application with TypeScript configuration. Set up middleware for CORS, JSON parsing, express-session for admin authentication. Create basic route structure with error handling middleware. Configure environment variable loading with dotenv. Set up health check endpoint. Create basic API structure with /api prefix routing.
  testStrategy: Test server startup, verify middleware functionality, test health check endpoint, verify environment variable loading.
  priority: high
  dependencies: [1]

- title: Initialize React frontend with Vite and core dependencies
  description: Set up the frontend application with routing, styling, and state management.
  details: Create Vite React application with TypeScript template. Install and configure Tailwind CSS and shadcn/ui components. Set up Wouter routing with basic page structure (home, cake builder, cart, checkout, admin). Configure Zustand for cart state management with persistence middleware. Set up TanStack Query for server state management. Create basic layout components with navigation.
  testStrategy: Test application startup, verify routing works, test styling and components render, verify state management.
  priority: high
  dependencies: []

- title: Implement admin login and session management
  description: Create secure admin authentication with environment-based credentials and session tokens.
  details: Create admin login API endpoint that validates credentials against environment variables (ADMIN_USERNAME, ADMIN_PASSWORD). Implement session token generation and validation middleware. Create admin login page with form validation using react-hook-form and Zod. Implement session storage in localStorage with 24-hour expiry. Create logout functionality and session cleanup. Add protected route wrapper for admin pages.
  testStrategy: Test login with correct/incorrect credentials, verify session persistence, test session expiry, verify protected routes.
  priority: high
  dependencies: [2]

- title: Create dynamic pricing calculation system
  description: Implement real-time pricing calculation based on cake configuration.
  details: Create pricing-structure.json file with base prices (6inch 9000, 8inch 16000), layer prices, flavor upcharges, decoration costs, icing type costs, dietary restrictions costs, and shape costs. Implement /api/calculate-price POST endpoint that accepts cake configuration and returns calculated price breakdown. Create pricing calculation logic with validation for required fields. Add price formatting utilities for Malaysian Ringgit display.
  testStrategy: Test pricing calculations with various configurations, verify price accuracy, test edge cases and validation.
  priority: high
  dependencies: [2]

- title: Create 4-step cake configuration interface
  description: Build simplified cake builder for MVP with essential customization options.
  details: Create React components for 4-step cake builder Step 1 - Size selection (6", 8"), Step 2 - Layer configuration (1-3 layers), Step 3 - Flavor selection (butter, chocolate, orange, lemon), Step 4 - Basic decorations (sprinkles, fresh-fruit, flowers). Implement step navigation with progress indicator. Add form validation with Zod schemas. Integrate with pricing API for real-time price updates. Create cake configuration state management with Zustand.
  testStrategy: Test step navigation, verify form validation, test pricing integration, verify configuration persistence.
  priority: medium
  dependencies: [3,5]

- title: Implement customer checkout and order creation
  description: Create checkout process for single cake orders with customer information collection.
  details: Create customer information form with fields for name, email, phone, delivery method, special instructions. Implement form validation with Zod schemas. Create /api/checkout POST endpoint that creates single cake orders in database. Generate order confirmation with unique order ID. Create order confirmation page displaying order details and next steps. Implement order email notifications to customer and admin.
  testStrategy: Test form validation, verify order creation in database, test email notifications, verify order confirmation display.
  priority: medium
  dependencies: [4,6]

- title: Set up automated email notifications with Brevo SMTP
  description: Implement email system for order confirmations and admin notifications.
  details: Configure Brevo SMTP with environment variables (BREVO_SMTP_USER, BREVO_SMTP_PASS, FROM_EMAIL, ADMIN_EMAIL). Create email service module with nodemailer configuration. Design HTML email templates for customer order confirmation and admin order notification. Implement email sending functions with error handling and retry logic. Create email content generation based on order type (single vs multi-item).
  testStrategy: Test email delivery, verify template rendering, test error handling, verify admin notifications.
  priority: medium
  dependencies: [7]

- title: Create admin interface for viewing and managing orders
  description: Build admin dashboard for order management with listing and detail views.
  details: Create admin orders page with order listing table showing order ID, customer name, date, status, and total price. Implement order detail view displaying complete order information including cake configuration and customer details. Add basic order status update functionality (pending, confirmed, completed). Create order filtering by status and date range. Add order deletion functionality with confirmation dialog.
  testStrategy: Test order listing display, verify order details accuracy, test status updates, verify filtering functionality.
  priority: medium
  dependencies: [4,7]

- title: Expand cake builder to full 8-step configuration process
  description: Enhance cake builder with complete customization options and visual preview.
  details: Extend cake builder to 8 steps Add icing color selection with color picker component, dietary restrictions (eggless, vegan, halal), message input with character validation, serving size calculator with 6" and 8" cake quantity sliders. Create visual cake preview component using CSS/SVG representation. Implement advanced form validation and error handling. Add step-by-step progress indicator with completion status.
  testStrategy: Test all 8 steps functionality, verify visual preview accuracy, test validation across all steps, verify pricing updates.
  priority: medium
  dependencies: [6]

- title: Create multi-item shopping cart with persistence
  description: Implement shopping cart functionality supporting custom cakes and specialty items.
  details: Create Zustand cart store with persistence middleware for localStorage. Implement cart actions addToCart, removeFromCart, updateQuantity, clearCart. Create cart sidebar component with item listing, quantity controls, and running total. Add cart icon to navigation with item count badge. Implement cart validation before checkout. Create cart page with detailed item management.
  testStrategy: Test cart operations, verify persistence across sessions, test quantity updates, verify total calculations.
  priority: medium
  dependencies: [3,10]

- title: Create dynamic specialty items catalog from JSON configuration
  description: Build specialty items page with products loaded from pricing configuration.
  details: Create /api/cakes GET endpoint that reads and transforms pricing-structure.json to return organized product categories (specialty-cakes, cake-slices, coconut-candy). Build specialty items page with product grid layout. Create product card components with images, descriptions, and pricing. Implement category filtering and product search functionality. Add product detail modals with enhanced descriptions. Integrate add-to-cart functionality for specialty items.
  testStrategy: Test product loading from API, verify category organization, test add-to-cart integration, verify search and filtering.
  priority: medium
  dependencies: [5,11]

- title: Modify checkout to handle multiple cart items
  description: Enhance checkout process to support orders with multiple items.
  details: Modify /api/checkout endpoint to handle both single and multi-item orders using hasLineItems flag. Implement order_items table integration for multi-item orders. Update checkout form to display cart summary with itemized pricing. Create line item creation logic for each cart item. Update email templates to properly display multi-item orders with organized sections. Implement order total validation.
  testStrategy: Test single and multi-item checkout flows, verify line items creation, test email template rendering, verify order totals.
  priority: high
  dependencies: [7,11,12]

- title: Create admin interface for real-time pricing updates
  description: Build comprehensive pricing management system for admin users.
  details: Create admin pricing management page with tabbed interface for different price categories (base prices, decorations, icing types, dietary options, shapes). Implement form inputs for each pricing field with validation. Add automatic backup creation before price updates. Create pricing history view showing previous versions. Implement immediate price updates without server restart. Add cache invalidation for pricing-related API calls.
  testStrategy: Test price updates across all categories, verify backup creation, test pricing history, verify immediate price changes.
  priority: medium
  dependencies: [4,5]

- title: Improve admin dashboard with advanced order management features
  description: Enhance admin interface with better order handling and multi-item support.
  details: Update admin orders dashboard to properly display both single and multi-item orders. Create enhanced order detail views with expandable line items for multi-item orders. Add bulk order operations (delete multiple, status updates). Implement order search and advanced filtering (date range, customer name, order type). Add order export functionality. Create real-time order refresh with auto-update.
  testStrategy: Test order display for both order types, verify bulk operations, test search and filtering, verify real-time updates.
  priority: medium
  dependencies: [9,13]

- title: Create image gallery with admin upload capabilities
  description: Build gallery system for showcasing cake portfolio with product linking.
  details: Create gallery_images database table (id, filename, title, description, alt_text, product_link, display_order, is_visible, created_at). Implement image upload API with file validation and processing. Create admin gallery management interface with drag-and-drop upload, image metadata editing, and display order management. Build public gallery page with responsive grid layout and lightbox functionality. Add product linking to connect gallery images with purchasable items.
  testStrategy: Test image upload and processing, verify admin management features, test public gallery display, verify product linking.
  priority: low
  dependencies: [1,4]

- title: Implement customer review collection and display system
  description: Create review system for building social proof and collecting feedback.
  details: Create reviews database table (id, order_id, customer_name, rating, review_text, review_photos, is_approved, created_at). Implement post-order email workflow for review collection. Create admin moderation interface for review approval/rejection. Build public reviews display with star ratings and photo support. Add review integration to homepage and product pages. Implement review filtering and sorting options.
  testStrategy: Test review collection workflow, verify admin moderation, test public display, verify rating calculations.
  priority: low
  dependencies: [8,4]

- title: Create dynamic FAQ system with admin management
  description: Build FAQ system to reduce support burden through self-service.
  details: Create faqs database table (id, question, answer, category, display_order, is_visible, created_at). Create admin FAQ management interface with CRUD operations for questions and answers. Build public FAQ page with category organization and search functionality. Implement FAQ search with keyword highlighting. Add popular questions tracking and display. Create FAQ categories for better organization.
  testStrategy: Test FAQ CRUD operations, verify search functionality, test category organization, verify popular questions tracking.
  priority: low
  dependencies: [4]

- title: Implement automated order status notification system
  description: Create notification system to keep customers informed of order progress.
  details: Create notifications system with email and SMS integration. Implement order status workflow (pending, confirmed, in-progress, ready, completed). Create automated notification triggers for status changes. Build customer order tracking portal with status timeline. Add pickup reminders and delivery notifications. Create notification preferences for customers. Implement admin notification management interface.
  testStrategy: Test notification delivery, verify status workflow, test customer portal, verify notification preferences.
  priority: low
  dependencies: [8,15]

- title: Create delivery zone configuration and pricing system
  description: Implement automated delivery fee calculation based on customer location.
  details: Create delivery_zones database table (id, zone_name, postcodes, base_fee, per_km_rate, is_active). Create admin zone management interface for configuring delivery areas and pricing. Implement postcode checker for automatic delivery fee calculation. Add delivery availability scheduling for different zones. Create distance-based pricing calculator. Build delivery zone map visualization for admin reference.
  testStrategy: Test zone configuration, verify postcode checking, test fee calculations, verify scheduling functionality.
  priority: low
  dependencies: [4,13]

- title: Implement customer wishlist and reordering functionality
  description: Create system for customers to save and reorder preferred items.
  details: Create customer_favorites database table (id, session_id, item_type, item_config, created_at). Implement wishlist functionality for both custom cakes and specialty items. Create quick reorder buttons for previous orders. Add sharing functionality for favorite configurations. Implement reminder emails for saved items. Create customer favorites management interface. Add favorite item recommendations based on preferences.
  testStrategy: Test wishlist operations, verify reordering functionality, test sharing features, verify reminder system.
  priority: low
  dependencies: [11,13]

- title: Create system for handling large orders and corporate clients
  description: Implement bulk ordering capabilities with quantity discounts and event planning.
  details: Create bulk_orders database table and corporate_accounts table. Implement quantity discount pricing tiers with automatic calculation. Create event planning interface for coordinating multiple cakes. Add corporate account management with special pricing. Implement advance order scheduling system. Create bulk customization options for applying designs to multiple cakes. Add bulk order tracking and management.
  testStrategy: Test bulk pricing calculations, verify event planning features, test corporate account management, verify scheduling.
  priority: low
  dependencies: [13,14]

- title: Create inventory tracking and production planning system
  description: Build system for managing ingredients and planning production schedules.
  details: Create inventory database tables (ingredients, stock_levels, suppliers, production_schedules). Implement ingredient tracking with low stock alerts. Create production planning suggestions based on order volume. Add supplier integration for reordering supplies. Implement seasonal adjustment capabilities for stock levels. Create inventory reporting and analytics. Add automated reorder notifications and suggestions.
  testStrategy: Test inventory tracking, verify alert system, test production planning, verify supplier integration.
  priority: low
  dependencies: [15,4]

- title: Implement business intelligence and reporting system
  description: Create comprehensive analytics system for business insights.
  details: Create analytics data collection throughout user journey (page views, conversions, cart abandonment). Implement business reporting system with key metrics (revenue, order volume, conversion rates). Create admin analytics dashboard with charts and graphs. Add customer behavior analysis and segmentation. Implement A/B testing framework for feature optimization. Create automated reporting with email delivery.
  testStrategy: Test data collection, verify report accuracy, test dashboard functionality, verify automated reporting.
  priority: low
  dependencies: [15,4]

- title: Create centralized communication system for order discussions
  description: Build messaging system for customer-admin communication about orders.
  details: Create messages database table (id, order_id, sender_type, message_content, attachments, created_at). Implement real-time messaging system for order-specific discussions. Create design consultation booking system with calendar integration. Add photo sharing capabilities for inspiration and approval. Build approval workflow for custom designs with admin notifications. Create follow-up survey system for post-delivery feedback.
  testStrategy: Test messaging functionality, verify consultation booking, test photo sharing, verify approval workflow.
  priority: low
  dependencies: [15,8]

- title: Implement robust database connection handling
  description: Create resilient database connection system with retry logic and monitoring.
  details: Implement database connection wrapper with automatic retry logic and exponential backoff. Create connection health checks with monitoring endpoints. Add database connection pooling configuration for optimal performance. Create fallback error pages for database failures. Implement database performance monitoring and alerting. Add connection timeout handling and graceful degradation.
  testStrategy: Test connection retry logic, verify health checks, test failure scenarios, verify monitoring alerts.
  priority: medium
  dependencies: [1]

- title: Create reliable email delivery system with fallback mechanisms
  description: Implement robust email system with retry logic and failure handling.
  details: Create email queue system with database-backed storage for retry logic. Implement exponential backoff for failed email deliveries. Add email delivery status tracking and monitoring. Create admin notifications for email failures. Implement manual email resend functionality. Add email template validation and testing utilities.
  testStrategy: Test email queue functionality, verify retry logic, test failure notifications, verify manual resend.
  priority: medium
  dependencies: [8]

- title: Optimize application performance for scaling
  description: Implement caching, optimization, and performance monitoring.
  details: Implement pricing calculation caching with TTL (time-to-live). Add database query optimization with proper indexing. Create API response caching for frequently accessed data. Implement image optimization and lazy loading. Add performance monitoring with metrics collection. Create database query profiling and optimization recommendations.
  testStrategy: Test caching effectiveness, verify query performance, test image optimization, verify monitoring accuracy.
  priority: low
  dependencies: [5,12]

- title: Create automated testing framework for critical user flows
  description: Implement testing coverage for core functionality and user journeys.
  details: Set up Jest and React Testing Library for frontend component testing. Create API endpoint testing with supertest. Implement end-to-end testing for critical user flows (order creation, admin management). Add database integration testing with test database setup. Create pricing calculation accuracy testing. Implement email delivery testing with mock SMTP server.
  testStrategy: Verify test coverage metrics, test CI/CD integration, validate test accuracy, verify mock services.
  priority: medium
  dependencies: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]

- title: Configure production deployment pipeline on Railway
  description: Set up production environment with proper configuration and monitoring.
  details: Configure Railway deployment with environment variables (DATABASE_URL, ADMIN_CREDENTIALS, SMTP_CONFIG). Set up build process with proper asset compilation. Create database migration scripts for production deployment. Implement health check endpoints for monitoring. Add error logging and monitoring integration. Create backup and rollback procedures.
  testStrategy: Test deployment process, verify environment configuration, test health checks, verify monitoring.
  priority: high
  dependencies: [29]
